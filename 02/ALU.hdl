// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Store NotX and NotY
    Not16 (in=x, out=notX);
    Not16 (in=y, out=notY);
    // Here we decide which Xs and Ys to use by checking the zx, nx, zy and ny
    // flags respectively
    Mux4Way16 (a=x, b=false, c=notX, d=true, sel[0]=zx, sel[1]=nx, out=actualX);
    Mux4Way16 (a=y, b=false, c=notY, d=true, sel[0]=zy, sel[1]=ny, out=actualY);

    // Here we AND and Add actualX and actualY, and choose which result we want
    // by muxing them based on f
    And16 (a=actualX, b=actualY, out=xAndY);
    Add16 (a=actualX, b=actualY, out=xPlusY);
    Mux16 (a=xAndY, b=xPlusY, sel=f, out=result);

    // Here we negate result and mux it against result based on the no flag
    Not16 (in=result, out=notResult);
    Mux16 (a=result, b=notResult, sel=no, out=out, out[0..7]=firstHalf, out[8..15]=secondHalf, out[15]=isNegative);

    // Are there only zeroes in each half of the output?
    Or8Way(in=firstHalf, out=allZeroes1);
    Or8Way(in=secondHalf, out=allZeroes2);
    Or(a=allZeroes1, b=allZeroes2, out=allZeroesFinal);
    Xor(a=allZeroesFinal, b=true, out=zr);

    // If the first bit we extracted earlier is 1, the number is negative
    And(a=isNegative, b=true, out=ng);
}