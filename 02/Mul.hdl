CHIP Mul{
    IN a[16], b[16];
    OUT out[16];

    PARTS:
    // Multiplies each bit in 'a' by an index in 'b' and then shift to the
    // Next bit index in 'b' before multiplying again.
    // Essentially each time a is multiplied by either 1 or 0, so we either get
    // 'a' itself or a 16-bit zero.
    Mux16 (a=false, b=a, sel=b[0], out=mul0);
    ShiftLeft (in=a, out=shift1);
    
    Mux16 (a=false, b=shift1, sel=b[1], out=mul1);
    ShiftLeft (in=shift1, out=shift2);
    
    Mux16 (a=false, b=shift2, sel=b[2], out=mul2);
    ShiftLeft (in=shift2, out=shift3);
    
    Mux16 (a=false, b=shift3, sel=b[3], out=mul3);
    ShiftLeft (in=shift3, out=shift4);
    
    Mux16 (a=false, b=shift4, sel=b[4], out=mul4);
    ShiftLeft (in=shift4, out=shift5);
    
    Mux16 (a=false, b=shift5, sel=b[5], out=mul5);
    ShiftLeft (in=shift5, out=shift6);
    
    Mux16 (a=false, b=shift6, sel=b[6], out=mul6);
    ShiftLeft (in=shift6, out=shift7);
    
    Mux16 (a=false, b=shift7, sel=b[7], out=mul7);
    ShiftLeft (in=shift7, out=shift8);
    
    Mux16 (a=false, b=shift8, sel=b[8], out=mul8);
    ShiftLeft (in=shift8, out=shift9);
    
    Mux16 (a=false, b=shift9, sel=b[9], out=mul9);
    ShiftLeft (in=shift9, out=shift10);
    
    Mux16 (a=false, b=shift10, sel=b[10], out=mul10);
    ShiftLeft (in=shift10, out=shift11);
    
    Mux16 (a=false, b=shift11, sel=b[11], out=mul11);
    ShiftLeft (in=shift11, out=shift12);
    
    Mux16 (a=false, b=shift12, sel=b[12], out=mul12);
    ShiftLeft (in=shift12, out=shift13);
    
    Mux16 (a=false, b=shift13, sel=b[13], out=mul13);
    ShiftLeft (in=shift13, out=shift14);
    
    Mux16 (a=false, b=shift14, sel=b[14], out=mul14);
    ShiftLeft (in=shift14, out=shift15);
    
    Mux16 (a=false, b=shift15, sel=b[15], out=mul15);

    // Now we sum all of the partial products we've calculated 
    Add16(a=mul0, b=mul1, out=add0);
    Add16(a=add0, b=mul2, out=add1);
    Add16(a=add1, b=mul3, out=add2);
    Add16(a=add2, b=mul4, out=add3);
    Add16(a=add3, b=mul5, out=add4);
    Add16(a=add4, b=mul6, out=add5);
    Add16(a=add5, b=mul7, out=add6);
	Add16(a=add6, b=mul8, out=add7);
    Add16(a=add7, b=mul9, out=add8);
    Add16(a=add8, b=mul10, out=add9);
    Add16(a=add9, b=mul11, out=add10);
    Add16(a=add10, b=mul12, out=add11);
    Add16(a=add11, b=mul13, out=add12);
    Add16(a=add12, b=mul14, out=add13);
    Add16(a=add13, b=mul15, out=out);
}