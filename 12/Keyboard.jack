// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

	static Array keyboard;

    /** Initializes the keyboard. */
    function void init() {
    	let keyboard = 24576;
    	return;
    } 

    /**
     * Returns the ASCII code (as char) of the currently pressed key,
     * or 0 if no key is currently pressed.
     * Recognizes all ASCII characters, as well as the following extension
     * of action keys:
     * New line = 128 = String.newline()
     * Backspace = 129 = String.backspace()
     * Left Arrow = 130
     * Up Arrow = 131
     * Right Arrow = 132
     * Down Arrow = 133
     * Home = 134
     * End = 135
     * Page Up = 136
     * Page Down = 137
     * Insert = 138
     * Delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
    	return keyboard[0];
    }

    /**								
     * Reads the next character from the keyboard.
     * waits until a key is pressed and then released, then echoes
     * the key to the screen, and returns the value of the pressed key.
     */
    function char readChar() {
    	var int c;
    	
		while (Keyboard.keyPressed() = 0) {}
		// Once a key is pressed, loop ends and press is recorded
		let c = keyboard[0];
		// While that key is pressed, wait for the user to let go
		while (Keyboard.keyPressed() = c) {}
		// Print c at the current cursor location
		do Output.printChar(c);
		
		return c;
    }

    /**								
     * Prints the message on the screen, reads the next line
     * (until a newline character) from the keyboard, and returns its value.
     */
    function String readLine(String message) {
        var String s;
    	var int len;
    	var char c;
    	
    	let len = 79; // In some previous CS courses, the limit of a line of
    					// Of code was 79 characters
    	let s = String.new(len);
    	let c = Keyboard.readChar();
    	while (~(c = String.newLine()))
    	{
    		if (c = String.backSpace())
    		{
                do s.eraseLastChar();
            }
            else
            {
                do s.appendChar(c);
            }
            let c = Keyboard.readChar();
    	}
    	return s;
    }   

    /**								
     * Prints the message on the screen, reads the next line
     * (until a newline character) from the keyboard, and returns its
     * integer value (until the first non numeric character).
     */
    function int readInt(String message) {
    	var String s;
    	
		let s = Keyboard.readLine(message);
		return s.intValue();
    }
}
