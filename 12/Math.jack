// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {
    static Array powersOfTwo; // Stores the values of the first 16 powers
    						  // Of two: 1,2,4,8,...,32768 for later use

    /** Initializes the library. */
    function void init() {
    	let powersOfTwo = Array.new(16);
    	do Math.powers();
    	return;
    }
    
	/** This is the equivalent of checking if the
       the j'th bit of y is 1, because powersOfTwo[j] contains
   	   2^j, i.e 000..1..00, so a bitwise AND will give you
   	   either 000..1..00 (2^j) or 000..0..00 */
    function boolean bit(int x, int j) {
    	var int comp;
    	let comp = (x & powersOfTwo[j]);
    	return (comp = powersOfTwo[j]);
    }
    	
    function void powers() {
    	var int currentVal, currentBit;
    	let currentBit = 0;
    	let currentVal = 1;
    	while(currentBit < 16) {
    		let powersOfTwo[currentBit] = currentVal;
    		let currentVal = currentVal + currentVal; // We use addition here
    		// Because multiplication is a more expensive operation
    		let currentBit = currentBit + 1;
    	}
    	return;
    }
    
	/** Shift right function. For external library use */
	function int shiftRight(int x, int n) {
		var int i, result;
		let result = 0;
		let i = n;
		while (i < 16) {
			if ((powersOfTwo[i] & x) = powersOfTwo[i]) {
				let result = result + powersOfTwo[i - n];
			}
			let i = i + 1;
		}
		return result;
	}
	
	/** Shift left function. For external library use */
	function int shiftLeft(int x, int n) {
		var int i;
		let i = 0;
		while (i < n) {
			let x = x + x;
			let i = i + 1;
		}
		return x;
	}
	

    /** Returns the absolute value of x. */
    function int abs(int x) {
    	if (x < 0) {
    		return (-x);
    	}
    	return x;
    }

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
        var int currBit, product, compBit, shiftedX;
        
        let product = 0;
        let shiftedX = x;
        
        let currBit = 0;
        while(currBit < 16)
        {
            if (Math.bit(y, currBit))
            {
                let product = product + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let currBit = currBit + 1;
        }     
        return product;
    }
    
    /** Returns the integer part of x/y. */
    function int divide(int x, int y) {
    	if (y = 0)
        {
            do Sys.error(3);
        }
        
        // If the x,y are of different signs, the result of division
        // Will be -(|x|/|y|)
        if (((x > 0) & (y < 0)) | ((x < 0) & (y > 0)))
        {
            return (-Math.divideHelper(Math.abs(x), Math.abs(y)));
        }
        // Otherwise, the quotient will be |x|/|y|
        return Math.divideHelper(Math.abs(x), Math.abs(y));
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
   		var int y, j, tmpSquared, tmp;
    	if (x < 0) {
            do Sys.error(4);
		}
		let y = 0;
		let j = 7;
		while (j > -1) {
			let tmp = y + powersOfTwo[j];
			let tmpSquared = Math.multiply(tmp, tmp);
			if (~(tmpSquared > x) & (tmpSquared > 0)) {
				let y = y + powersOfTwo[j];
			}
			let j = j - 1;
		}
		return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
    	if(a < b)
    	{
    		return b;
    	}
    	return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(b < a)
    	{
    		return b;
    	}
    	return a;
    }
    
    /** The main division function. Performes recursive chunk division
    Given non-negative x and positive y */
    function int divideHelper(int x, int y) {
        var int q;
        //Base case
        if (y > x)
        {
            return 0;
        }
        
        let q = Math.divideHelper(x, y + y);
        if ((x - ((q + q) * y)) < y)
        {
            return q + q;
        }
        else
        {
            return (q + q) + 1;
        }
    }
    
}
