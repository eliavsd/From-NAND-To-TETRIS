// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
	
	static Array kbd;
	static int MAX_LINE_LENGTH;
    
	/** Initializes the keyboard. */
    function void init() {
		let kbd = 24576;
		let MAX_LINE_LENGTH = 80;
		return;
    } 

    /**
     * Returns the ASCII code (as char) of the currently pressed key,
     * or 0 if no key is currently pressed.
     * Recognizes all ASCII characters, as well as the following extension
     * of action keys:
     * New line = 128 = String.newline()
     * Backspace = 129 = String.backspace()
     * Left Arrow = 130
     * Up Arrow = 131
     * Right Arrow = 132
     * Down Arrow = 133
     * Home = 134
     * End = 135
     * Page Up = 136
     * Page Down = 137
     * Insert = 138
     * Delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
		return kbd[0];
    }

    /**								
     * Reads the next character from the keyboard.
     * waits until a key is pressed and then released, then echoes
     * the key to the screen, and returns the value of the pressed key.
     */
    function char readChar() {
		var char keyPressed;
		
		while(kbd[0] = 0){ //Do nothing (waiting for press)
		}
		
		let keyPressed = kbd[0];
		while(~(kbd[0] = 0)){ //Do nothing (waiting for release)
		}
		
		do Output.printChar(keyPressed); 
		return keyPressed;
    }

    /**								
     * Prints the message on the screen, reads the next line
     * (until a newline character) from the keyboard, and returns its value.
     */
    function String readLine(String message) {
		var String str;
        var char currChar, newLine, backspace;
        
        do Output.printString(message);
        
        let str = String.new(MAX_LINE_LENGTH);     //create a string of size max length
		let newLine = String.newLine(); //Done for efficiency reasons
		let backspace = String.backSpace(); //Done for efficiency reasons
        
		let currChar = Keyboard.readChar(); //Read the keyboard's character
        
		while( ~(currChar = newLine) ) {
            if( currChar = backspace ) {
                do str.eraseLastChar();
            }
            else {
                do str.appendChar(currChar);
            }
            let currChar = Keyboard.readChar();
        }
        return str;
    }   

    /**								
     * Prints the message on the screen, reads the next line
     * (until a newline character) from the keyboard, and returns its
     * integer value (until the first non numeric character).
     */
    function int readInt(String message) {
	    var String str;
        
        let str = Keyboard.readLine(message);
        return str.intValue();
    }
}
