// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
// Or

/**
 * Represents a String object. Implements the String type.
 */
class String {
	
	field Array charArray;
	field int maxSize, length;
    
	/** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
		let length = 0;
		
		if(maxLength < 0){
			do Sys.error(14);
		}
		
		let maxSize = maxLength;
		
		if(maxSize > 0){
			let charArray = Array.new(maxLength);
		}
		
		return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
		if(length > 0){
			do charArray.dispose();
		}
		
		do Memory.deAlloc(this);
		return;
    }

    /** Returns the current length of this String. */
    method int length() {
		return length;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
		if((j > maxSize) | (j < 0) | (j > length) | (j = length)){
			do Sys.error(15);
		}
		return charArray[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
		if((j < 0) | (j > length) | (j = length)){
			do Sys.error(16);
		}
		
		let charArray[j] = c;
	
		return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
		if(length < maxSize){
			let charArray[length] = c;
			let length = length + 1;
		}
		else{
			do Sys.error(17);
		}
		return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
		if(length > 0){
			let length = length - 1;
		}
		else{
			do Sys.error(18);
		}
		
		return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
		var int value, i, digit;
		var boolean isNegative;
		
		let value = 0;
		let i = 0;
		let isNegative = false;
		if(length = 0){
			return 0;
		}
		
		if(charArray[0] = 45){  //The "-" char
			let isNegative = true;
			let i = 1;
		}
		
		while(i < length){
			let digit = charArray[i] - 48;
			let value = (value * 10) + digit;
			let i = i + 1;
		}
		
		if(isNegative){
			return -value;
		}
		else{
			return value;
		}
		
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
		let length = 0;
		
		if(number < 0){
			do appendChar(45);
		}
		
		do numToString(this, Math.abs(number));
		return;
    }
	
	method void numToString(String string, int number){
		var int lastDigit, cValue;
        var String string;
		
		let lastDigit = number - ((number/10) * 10);
		let cValue = lastDigit + 48;
		
		if (number < 10){  //If it is a single digit then just append it
			if(length = maxSize){
				do Sys.error(19);
			}
			do string.appendChar(cValue);
		}
		else{ //This is a power of 10, so we divide by 10 and call recursively
			if(length = maxSize){
				do Sys.error(19);
			}
			do numToString(string, number/ 10);
			do string.appendChar(cValue);
		}
		return;
	}

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
